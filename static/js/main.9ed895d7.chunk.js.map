{"version":3,"sources":["static-data.js","reducers/index.js","reducers/user.js","reducers/contacts.js","reducers/activeUserId.js","constants/action-type.js","reducers/messages.js","reducers/typing.js","store/index.js","containers/User.js","actions/index.js","components/Sidebar.js","components/Empty.js","components/Header.js","components/Chats.js","containers/MessageInput.js","containers/ChatWindow.js","components/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","combineReducers","state","activeUserId","action","type","payload","message","userId","allUserMsgs","keys","pop","typing","store","createStore","reducer","handleUserClick","console","log","dispatch","User","className","onClick","bind","src","alt","Sidebar","map","contact","key","Empty","first_name","split","Header","Chat","Chats","props","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","this","ref","Component","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","setTypingValue","target","placeholder","ChatWindow","activeUser","activeMsgs","values","Main","App","Boolean","window","location","hostname","match","render","ReactDOM","StrictMode","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+QAsDuBA,E,mEAtDjBC,EAAUC,EAAQ,IAClBC,EAASD,EAAQ,IACjBE,EAAQF,EAAQ,IAChBG,EAAIH,EAAQ,GAEZI,GAiDiBN,EAjDK,GAkDnBO,MAAMC,KAAK,CAAEC,OAAQT,IAAiB,kBAAMU,QAjDxCC,EAAWN,EAAEO,QAAQN,EAAO,WAC5BO,EAAc,SAAAC,GACzB,IAAIC,EAAW,GAMf,OALAV,EAAEW,QAAQV,GAAO,SAAAW,GAiDnB,IAAsBC,EAhDlBH,EAASE,EAAKE,SAAd,eACKd,EAAEO,SA+CWM,EA/CUJ,EAgDvBP,MAAMC,KAAK,CAAEC,OAAQS,IAAgB,SAACE,EAAGC,GAAJ,MAjBrC,CACLC,OAgBgED,EAfhEE,KAAMpB,EAAOqB,WACbC,YAAarB,EAAMsB,OAAOC,eAlCoB,cAGzCZ,GAKDL,IACIG,EAAY,IASjB,SAASH,IACd,MAAO,CACLkB,KAAMxB,EAAMwB,KAAKC,WACjBC,MAAO1B,EAAM2B,SAASD,QACtBE,YAAa5B,EAAM2B,SAASE,SAC5BC,OAAQ/B,EAAOqB,WACfL,QAASlB,EAAQkC,Y,2BC3BNC,kBAAgB,CAC7BnB,KCRa,WAA+C,IAAjCoB,EAAgC,uDAAxB3B,IACnC,OAAO2B,GDQP1B,SERa,WAAgC,IAA/B0B,EAA8B,uDAAvB,CAAC1B,YACvB,OAAO0B,GFQNC,aGVa,WAA6C,IAAvBD,EAAsB,uDAAd,KAAME,EAAQ,uCACzD,OAAQA,EAAOC,MACb,ICH8B,qBDI5B,OAAOD,EAAOE,QAChB,QACE,OAAOJ,IHMXtB,SKPa,WAAmD,IAAjCsB,EAAgC,uDAAzBxB,EAAY,IAAK0B,EAAQ,uCAChE,OAAQA,EAAOC,MACZ,IDLwB,eCKxB,MAC8BD,EAAOE,QAA3BC,EADV,EACUA,QAASC,EADnB,EACmBA,OACXC,EAAcP,EAAMM,GACpBrB,GAAUjB,IAAEwC,KAAKD,GAAaE,MAAQ,EAE5C,OAAO,2BACFT,GADL,kBAEGM,EAFH,2BAGOC,GAHP,kBAIKtB,EAAS,CACRA,SACAC,KAAMmB,EACNjB,aAAa,OAKrB,QACE,OAAOY,ILZXU,OMXa,WAAqC,IAArBV,EAAoB,uDAAZ,GAAIE,EAAQ,uCAClD,OAAOA,EAAOC,MACb,IFH8B,mBEI7B,OAAOD,EAAOE,QACf,IFJ0B,eEKlB,MAAO,GACf,QACC,OAAOJ,MCHKW,EAFDC,YAAYC,GCC1B,SAASC,EAAT,GAAuC,IAAZhC,EAAW,EAAXA,QAC1BiC,QAAQC,IAAIlC,GACX6B,EAAMM,SCL8B,CACpCd,KLHgC,qBKIhCC,QDG+BtB,IAGjC,IAceoC,EAdF,SAAC,GAAc,IAAZtC,EAAW,EAAXA,KACPW,EAA8BX,EAA9BW,KAAMI,EAAwBf,EAAxBe,YAAaE,EAAWjB,EAAXiB,OAEzB,OACD,yBAAKsB,UAAU,OAAOC,QAASN,EAAgBO,KAAK,KAAMzC,IACzD,yBAAK0C,IAAO3B,EAAa4B,IAAKhC,EAAM4B,UAAU,cAC7C,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,sBAAsB5B,GACnC,uBAAG4B,UAAU,wBAAwBtB,MEL9B2B,G,QATC,SAAC,GAAkB,IAAhBlD,EAAe,EAAfA,SAEjB,OADDyC,QAAQC,IAAI1C,GAET,2BAAO6C,UAAU,WACd7C,EAASmD,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAAM9C,KAAM8C,EAASC,IAAKD,EAAQ5C,gBCelD8C,G,gBApBD,SAAC,GAAc,IAAZhD,EAAW,EAAXA,KACPW,EAA8BX,EAA9BW,KAAMI,EAAwBf,EAAxBe,YAAaE,EAAWjB,EAAXiB,OACrBgC,EAAatC,EAAKuC,MAAM,KAAK,GAEnC,OACE,yBAAKX,UAAU,SACb,wBAAIA,UAAU,eAAd,YAAsCU,EAAtC,KACA,yBAAKP,IAAK3B,EAAa4B,IAAKhC,EAAM4B,UAAU,eAC5C,uBAAGA,UAAU,iBACX,sCADF,IACkBtB,GAElB,4BAAQsB,UAAU,cAAlB,wBACA,uBAAGA,UAAU,eAAb,0F,QCFSY,MAVf,YAA2B,IAATnD,EAAQ,EAARA,KACRW,EAAiBX,EAAjBW,KAAMM,EAAWjB,EAAXiB,OACd,OACE,4BAAQsB,UAAU,UAChB,wBAAIA,UAAU,gBAAgB5B,GAC9B,uBAAG4B,UAAU,kBAAkBtB,K,gCCL/BmC,G,QAAO,SAAC,GAAiB,IAAf3B,EAAc,EAAdA,QACNnB,EAAsBmB,EAAtBnB,KAAME,EAAgBiB,EAAhBjB,YACd,OACE,0BAAM+B,UAAS,eAAU/B,EAAc,cAAgB,KAAOF,KA6BnD+C,E,kDAxBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,eAAiB,WACf,EAAKC,SAASC,QAAQC,UAAY,EAAKF,SAASC,QAAQE,cATxD,EAAKH,SAAWI,IAAMC,YAFL,E,gEAKjBC,KAAKP,mB,2CAGLO,KAAKP,mB,+BAML,OACE,yBAAKhB,UAAU,QAAQwB,IAAKD,KAAKN,UAC9BM,KAAKR,MAAMxD,SAAS+C,KAAI,SAAApB,GAAO,OAC9B,kBAAC,EAAD,CAAMA,QAASA,EAASsB,IAAKtB,EAAQpB,iB,GAlB3B2D,aCmBLC,G,gBAxBM,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB9C,EAAQW,EAAMoC,WAWjB,OACC,0BAAM5B,UAAU,UAAU6B,SAXR,SAAAC,GAClBA,EAAEC,iBADqB,IAEfxC,EAAyBV,EAAzBU,OAAQT,EAAiBD,EAAjBC,aAChBU,EAAMM,SLEuC,CAChDd,KLX2B,eKY3BC,QAAS,CACRC,QKL6BK,ELM7BJ,OKNqCL,OASjC,2BACEkB,UAAU,iBACVgC,SARe,SAAAF,GACnBtC,EAAMM,SLPoB,SAAA6B,GAAK,MAAK,CACvC3C,KLP+B,mBKQ/BC,QAAS0C,GKKSM,CAAeH,EAAEI,OAAOP,SAQnCA,MAAOA,EACPQ,YAAY,uBCELC,EAhBI,SAAC,GAAsB,IAApBtD,EAAmB,EAAnBA,aACdD,EAAQW,EAAMoC,WACdS,EAAaxD,EAAM1B,SAASA,SAAS2B,GACrCwD,EAAazD,EAAMtB,SAASuB,GAClCc,QAAQC,IAAIwC,GAJ2B,IAK/B9C,EAAWV,EAAXU,OAER,OACE,yBAAKS,UAAU,cACb,kBAAC,EAAD,CAAQvC,KAAM4E,IACd,kBAAC,EAAD,CAAO9E,SAAWV,IAAE0F,OAAOD,KAC3B,kBAAC,EAAD,CAAcX,MAASpC,MCJdiD,EAXF,SAAC,GAA2B,IAA1B/E,EAAyB,EAAzBA,KAAMqB,EAAmB,EAAnBA,aAQpB,OAAO,0BAAMkB,UAAU,QANlBlB,EAGI,kBAAC,EAAD,CAAYA,aAAgBA,IAF7B,kBAAC,EAAD,CAAOrB,KAAQA,EAAMqB,aAAcA,MCY7B2D,MAXf,WAAgB,IAAD,EAC4BjD,EAAMoC,WAAxCzE,EADM,EACNA,SAAUM,EADJ,EACIA,KAAMqB,EADV,EACUA,aAEvB,OACE,yBAAKkB,UAAU,OACb,kBAAC,EAAD,CAAS7C,SAAYN,IAAE0F,OAAOpF,EAASA,YACvC,kBAAC,EAAD,CAAMM,KAAMA,EAAMqB,aAAcA,MCHlB4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAS,WAEf,OAYCnD,QAAQC,IAAI,wBAAyB,mCACrCD,QAAQC,IAAIL,EAAMoC,YAbZoB,IAASD,OACd,kBAAC,IAAME,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,UAI1BJ,IACAvD,EAAM4D,UAAUL,GDgHV,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAM1E,a","file":"static/js/main.9ed895d7.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n  let messages = {};\r\n  _.forEach(users, user => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}","import user from \"./user\";\r\nimport contacts from \"./contacts\";\r\nimport activeUserId from \"./activeUserId\"\r\nimport typing from \"./typing\";\r\nimport { combineReducers } from \"redux\";\r\nimport messages from \"./messages\";\r\n\r\n\r\nexport default combineReducers({\r\n  user,\r\n  contacts,\r\n  activeUserId,\r\n  messages,\r\n  typing\r\n});","import { generateUser } from \"../static-data\";\r\nexport default function user(state = generateUser(), action) {\r\n  return state;\r\n}","import { contacts } from \"../static-data\";\r\n\r\nexport default (state= {contacts}, action) => {\r\n\treturn state;\r\n};","import { SET_ACTIVE_USER_ID } from \"../constants/action-type\";\r\nexport default function activeUserId(state = null, action) {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_USER_ID:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";","import { getMessages } from \"../static-data\";\r\nimport { SEND_MESSAGE } from \"../constants/action-type\";\r\nimport _ from \"lodash\";\r\n\r\n\r\nexport default function messages(state= getMessages(10), action) {\r\n\tswitch (action.type) {\r\n    case SEND_MESSAGE:\r\n      const { message, userId } = action.payload;\r\n      const allUserMsgs = state[userId];\r\n      const number = +_.keys(allUserMsgs).pop() + 1;\r\n\r\n      return {\r\n        ...state,\r\n        [userId]: {\r\n          ...allUserMsgs,\r\n          [number]: {\r\n            number,\r\n            text: message,\r\n            is_user_msg: true\r\n          }\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};","import { SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action-type\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n\tswitch(action.type) {\r\n\t\tcase SET_TYPING_VALUE:\r\n\t\t return action.payload;\r\n\t\tcase SEND_MESSAGE:\r\n          return \"\";\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import { createStore } from \"redux\";\r\nimport reducer from \"../reducers\";\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from \"react\";\r\nimport \"./User.css\";\r\nimport { setActiveUserId } from \"../actions\";\r\nimport store from '../store';\r\n\r\nfunction handleUserClick({ user_id }) {\r\n\tconsole.log(user_id);\r\n  store.dispatch(setActiveUserId(user_id));\r\n}\r\n\r\nconst User = ({ user }) => {\r\n\tconst { name, profile_pic, status } = user;\r\n\r\n   return (\r\n \t<div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n \t\t<img src = {profile_pic} alt={name} className=\"User__pic\" />\r\n \t\t <div className=\"User__details\">\r\n        <p className=\"User__details-name\">{name}</p>\r\n        <p className=\"User__details-status\">{status}</p>\r\n      </div>\r\n    </div>\r\n  \t);\r\n} ;\r\n\r\nexport default User;","import { SEND_MESSAGE, SET_ACTIVE_USER_ID, SET_TYPING_VALUE} from \"../constants/action-type\";\r\n\r\nexport const setActiveUserId = id => ({\r\n  type: SET_ACTIVE_USER_ID,\r\n  payload: id\r\n});\r\n\r\nexport const setTypingValue = value => ({\r\n\ttype: SET_TYPING_VALUE,\r\n\tpayload: value\r\n})\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n\ttype: SEND_MESSAGE,\r\n\tpayload: {\r\n\t\tmessage,\r\n\t\tuserId\r\n\t}\r\n})","import React from \"react\";\r\nimport User from \"../containers/User\"; \r\nimport \"./Sidebar.css\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n\tconsole.log(contacts);\r\n  return (\r\n    <aside className=\"Sidebar\">\r\n      {contacts.map(contact => <User user={contact} key={contact.user_id} />)}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport \"./Empty.css\";\r\n\r\nconst Empty = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n  const first_name = name.split(\" \")[0];\r\n\r\n  return (\r\n    <div className=\"Empty\">\r\n      <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n      <img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n      <p className=\"Empty__status\">\r\n        <b>Status:</b> {status}\r\n      </p>\r\n      <button className=\"Empty__btn\">Start a conversation</button>\r\n      <p className=\"Empty__info\">\r\n        Search for someone to start chatting with or go to Contacts to see who\r\n        is available\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Empty;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header({ user }) {\r\n  const { name, status } = user;\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1 className=\"Header__name\">{name}</h1>\r\n      <p className=\"Header__status\">{status}</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./Chats.css\";\r\n\r\nconst Chat = ({ message }) => {\r\n  const { text, is_user_msg } = message;\r\n  return (\r\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\r\n  );\r\n};\r\n\r\nclass Chats extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chatsRef = React.createRef();\r\n  }\r\n   componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  scrollToBottom = () => {\r\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Chats\" ref={this.chatsRef}>\r\n        {this.props.messages.map(message => (\r\n          <Chat message={message} key={message.number} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chats;","import React from \"react\";\r\nimport store from \"../store\";\r\nimport { setTypingValue, sendMessage } from \"../actions\";\r\nimport \"./MessageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\nconst state = store.getState();\r\n\tconst handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { typing, activeUserId } = state;\r\n    store.dispatch(sendMessage(typing, activeUserId));\r\n  };\r\n\r\n\t const handleChange = e => {\r\n    store.dispatch(setTypingValue(e.target.value));\r\n  };\r\n\r\n   return (\r\n    <form className=\"Message\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"Message__input\"\r\n        onChange={handleChange}\r\n        value={value}\r\n        placeholder=\"write a message\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageInput; \r\n","import React from \"react\";\r\nimport store from \"../store\";\r\nimport Header from \"../components/Header\";\r\nimport Chats from \"../components/Chats\";\r\nimport _ from \"lodash\";\r\nimport \"./ChatWindow.css\";\r\nimport MessageInput from \"./MessageInput\";\r\n\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n  const state = store.getState();\r\n  const activeUser = state.contacts.contacts[activeUserId];\r\n  const activeMsgs = state.messages[activeUserId];\r\n  console.log(activeUser);\r\n  const { typing } = state;\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      <Header user={activeUser} />\r\n      <Chats messages= {_.values(activeMsgs)} />\r\n      <MessageInput value = {typing}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow; ","import React from \"react\";\r\nimport \"./Main.css\";\r\nimport Empty from \"../components/Empty\";\r\nimport ChatWindow from \"../containers/ChatWindow\";\r\n\r\nconst Main = ({user, activeUserId }) => {\r\n\tconst renderMainContent =() => {\r\n\t\tif(!activeUserId){\r\n\t\t\treturn<Empty user = {user} activeUserId={activeUserId} />;\r\n\t\t} else {\r\n\t\t\treturn <ChatWindow activeUserId = {activeUserId} />;\r\n\t\t}\r\n\t};\r\n\treturn <main className=\"Main\">{ renderMainContent() }</main>;\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Sidebar from \"../components/Sidebar\";\nimport Main from \"../components/Main\";\nimport store from '../store/index';\nimport { getState } from  'redux';\nimport _ from 'lodash';\n \n\nfunction App() {\n\tconst { contacts, user, activeUserId  } = store.getState();\n\n  return (\n    <div className=\"App\">\n      <Sidebar contacts = {_.values(contacts.contacts)}/>\n      <Main user={user} activeUserId={activeUserId}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\n\nconst render = () => {\n\tfancyLog();\nreturn ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n};\n\nrender();\nstore.subscribe(render);\n\nfunction fancyLog() {\n\tconsole.log(\"%c Rendered with ? ??\", \"background: purple; color: #fff\");\n\tconsole.log(store.getState());\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}